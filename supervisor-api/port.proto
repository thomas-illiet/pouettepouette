syntax = "proto3";

package supervisor;

option go_package = 'supervisor/api';

service PortService {
  // Tunnel notifies clients to install listenersgo on remote machines.
  // After that such clients should call EstablishTunnel to forward incoming connections.
  rpc Tunnel(TunnelPortRequest) returns (TunnelPortResponse) {}

  // CloseTunnel notifies clients to remove listeners on remote machines.
  rpc CloseTunnel(CloseTunnelRequest) returns (CloseTunnelResponse) {}

  // EstablishTunnel actually establishes the tunnel for an incoming connection on a remote machine.
  rpc EstablishTunnel(stream EstablishTunnelRequest)
      returns (stream EstablishTunnelResponse);

  // AutoTunnel controls enablement of auto tunneling
  rpc AutoTunnel(AutoTunnelRequest) returns (AutoTunnelResponse) {}

  // RetryAutoExpose retries auto exposing the give port
  rpc RetryAutoExpose(RetryAutoExposeRequest) returns (RetryAutoExposeResponse) {}
}

enum TunnelVisibility {
  none = 0;
  host = 1;
  network = 2;
}

//region Tunnel

message TunnelPortRequest {
  uint32 port = 1;
  uint32 target_port = 2;
  TunnelVisibility visibility = 3;
  string client_id = 4;
}

message TunnelPortResponse {}

//endregion Tunnel

//region CloseTunnel

message CloseTunnelRequest { uint32 port = 1; }
message CloseTunnelResponse {}

//endregion CloseTunnel

//region EstablishTunnel

message EstablishTunnelRequest {
  oneof output {
    TunnelPortRequest desc = 1;
    bytes data = 2;
  };
}

message EstablishTunnelResponse { bytes data = 1; }

//endregion EstablishTunnel

//region AutoTunnel

message AutoTunnelRequest { bool enabled = 1; }
message AutoTunnelResponse {}

//endregion AutoTunnel

//region RetryAutoExpose

message RetryAutoExposeRequest {
  uint32 port = 1;
}
message RetryAutoExposeResponse {}

//endregion RetryAutoExpose