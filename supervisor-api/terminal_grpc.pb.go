// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: terminal.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TerminalService_Open_FullMethodName              = "/supervisor.TerminalService/Open"
	TerminalService_Shutdown_FullMethodName          = "/supervisor.TerminalService/Shutdown"
	TerminalService_Get_FullMethodName               = "/supervisor.TerminalService/Get"
	TerminalService_List_FullMethodName              = "/supervisor.TerminalService/List"
	TerminalService_Listen_FullMethodName            = "/supervisor.TerminalService/Listen"
	TerminalService_Write_FullMethodName             = "/supervisor.TerminalService/Write"
	TerminalService_SetSize_FullMethodName           = "/supervisor.TerminalService/SetSize"
	TerminalService_SetTitle_FullMethodName          = "/supervisor.TerminalService/SetTitle"
	TerminalService_UpdateAnnotations_FullMethodName = "/supervisor.TerminalService/UpdateAnnotations"
)

// TerminalServiceClient is the client API for TerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalServiceClient interface {
	// Open opens a new terminal running the login shell
	Open(ctx context.Context, in *OpenTerminalRequest, opts ...grpc.CallOption) (*OpenTerminalResponse, error)
	// Shutdown closes a terminal for the given alias,
	// SIGKILL'ing all child processes before closing the pseudo-terminal.
	Shutdown(ctx context.Context, in *ShutdownTerminalRequest, opts ...grpc.CallOption) (*ShutdownTerminalResponse, error)
	// Get returns an opened terminal info
	Get(ctx context.Context, in *GetTerminalRequest, opts ...grpc.CallOption) (*Terminal, error)
	// List lists all open terminals
	List(ctx context.Context, in *ListTerminalsRequest, opts ...grpc.CallOption) (*ListTerminalsResponse, error)
	// Listen listens to a terminal
	Listen(ctx context.Context, in *ListenTerminalRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenTerminalResponse], error)
	// Write writes to a terminal
	Write(ctx context.Context, in *WriteTerminalRequest, opts ...grpc.CallOption) (*WriteTerminalResponse, error)
	// SetSize sets the terminal's size
	SetSize(ctx context.Context, in *SetTerminalSizeRequest, opts ...grpc.CallOption) (*SetTerminalSizeResponse, error)
	// SetTitle sets the terminal's title
	SetTitle(ctx context.Context, in *SetTerminalTitleRequest, opts ...grpc.CallOption) (*SetTerminalTitleResponse, error)
	// UpdateAnnotations updates the terminal's annotations
	UpdateAnnotations(ctx context.Context, in *UpdateTerminalAnnotationsRequest, opts ...grpc.CallOption) (*UpdateTerminalAnnotationsResponse, error)
}

type terminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalServiceClient(cc grpc.ClientConnInterface) TerminalServiceClient {
	return &terminalServiceClient{cc}
}

func (c *terminalServiceClient) Open(ctx context.Context, in *OpenTerminalRequest, opts ...grpc.CallOption) (*OpenTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenTerminalResponse)
	err := c.cc.Invoke(ctx, TerminalService_Open_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Shutdown(ctx context.Context, in *ShutdownTerminalRequest, opts ...grpc.CallOption) (*ShutdownTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownTerminalResponse)
	err := c.cc.Invoke(ctx, TerminalService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Get(ctx context.Context, in *GetTerminalRequest, opts ...grpc.CallOption) (*Terminal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Terminal)
	err := c.cc.Invoke(ctx, TerminalService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) List(ctx context.Context, in *ListTerminalsRequest, opts ...grpc.CallOption) (*ListTerminalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTerminalsResponse)
	err := c.cc.Invoke(ctx, TerminalService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Listen(ctx context.Context, in *ListenTerminalRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenTerminalResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TerminalService_ServiceDesc.Streams[0], TerminalService_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenTerminalRequest, ListenTerminalResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TerminalService_ListenClient = grpc.ServerStreamingClient[ListenTerminalResponse]

func (c *terminalServiceClient) Write(ctx context.Context, in *WriteTerminalRequest, opts ...grpc.CallOption) (*WriteTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteTerminalResponse)
	err := c.cc.Invoke(ctx, TerminalService_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) SetSize(ctx context.Context, in *SetTerminalSizeRequest, opts ...grpc.CallOption) (*SetTerminalSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTerminalSizeResponse)
	err := c.cc.Invoke(ctx, TerminalService_SetSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) SetTitle(ctx context.Context, in *SetTerminalTitleRequest, opts ...grpc.CallOption) (*SetTerminalTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTerminalTitleResponse)
	err := c.cc.Invoke(ctx, TerminalService_SetTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) UpdateAnnotations(ctx context.Context, in *UpdateTerminalAnnotationsRequest, opts ...grpc.CallOption) (*UpdateTerminalAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTerminalAnnotationsResponse)
	err := c.cc.Invoke(ctx, TerminalService_UpdateAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServiceServer is the server API for TerminalService service.
// All implementations must embed UnimplementedTerminalServiceServer
// for forward compatibility.
type TerminalServiceServer interface {
	// Open opens a new terminal running the login shell
	Open(context.Context, *OpenTerminalRequest) (*OpenTerminalResponse, error)
	// Shutdown closes a terminal for the given alias,
	// SIGKILL'ing all child processes before closing the pseudo-terminal.
	Shutdown(context.Context, *ShutdownTerminalRequest) (*ShutdownTerminalResponse, error)
	// Get returns an opened terminal info
	Get(context.Context, *GetTerminalRequest) (*Terminal, error)
	// List lists all open terminals
	List(context.Context, *ListTerminalsRequest) (*ListTerminalsResponse, error)
	// Listen listens to a terminal
	Listen(*ListenTerminalRequest, grpc.ServerStreamingServer[ListenTerminalResponse]) error
	// Write writes to a terminal
	Write(context.Context, *WriteTerminalRequest) (*WriteTerminalResponse, error)
	// SetSize sets the terminal's size
	SetSize(context.Context, *SetTerminalSizeRequest) (*SetTerminalSizeResponse, error)
	// SetTitle sets the terminal's title
	SetTitle(context.Context, *SetTerminalTitleRequest) (*SetTerminalTitleResponse, error)
	// UpdateAnnotations updates the terminal's annotations
	UpdateAnnotations(context.Context, *UpdateTerminalAnnotationsRequest) (*UpdateTerminalAnnotationsResponse, error)
	mustEmbedUnimplementedTerminalServiceServer()
}

// UnimplementedTerminalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTerminalServiceServer struct{}

func (UnimplementedTerminalServiceServer) Open(context.Context, *OpenTerminalRequest) (*OpenTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedTerminalServiceServer) Shutdown(context.Context, *ShutdownTerminalRequest) (*ShutdownTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedTerminalServiceServer) Get(context.Context, *GetTerminalRequest) (*Terminal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTerminalServiceServer) List(context.Context, *ListTerminalsRequest) (*ListTerminalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTerminalServiceServer) Listen(*ListenTerminalRequest, grpc.ServerStreamingServer[ListenTerminalResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTerminalServiceServer) Write(context.Context, *WriteTerminalRequest) (*WriteTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTerminalServiceServer) SetSize(context.Context, *SetTerminalSizeRequest) (*SetTerminalSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSize not implemented")
}
func (UnimplementedTerminalServiceServer) SetTitle(context.Context, *SetTerminalTitleRequest) (*SetTerminalTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitle not implemented")
}
func (UnimplementedTerminalServiceServer) UpdateAnnotations(context.Context, *UpdateTerminalAnnotationsRequest) (*UpdateTerminalAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotations not implemented")
}
func (UnimplementedTerminalServiceServer) mustEmbedUnimplementedTerminalServiceServer() {}
func (UnimplementedTerminalServiceServer) testEmbeddedByValue()                         {}

// UnsafeTerminalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServiceServer will
// result in compilation errors.
type UnsafeTerminalServiceServer interface {
	mustEmbedUnimplementedTerminalServiceServer()
}

func RegisterTerminalServiceServer(s grpc.ServiceRegistrar, srv TerminalServiceServer) {
	// If the following call pancis, it indicates UnimplementedTerminalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TerminalService_ServiceDesc, srv)
}

func _TerminalService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Open(ctx, req.(*OpenTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Shutdown(ctx, req.(*ShutdownTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Get(ctx, req.(*GetTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTerminalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).List(ctx, req.(*ListTerminalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenTerminalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerminalServiceServer).Listen(m, &grpc.GenericServerStream[ListenTerminalRequest, ListenTerminalResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TerminalService_ListenServer = grpc.ServerStreamingServer[ListenTerminalResponse]

func _TerminalService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Write(ctx, req.(*WriteTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_SetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTerminalSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).SetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_SetSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).SetSize(ctx, req.(*SetTerminalSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTerminalTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_SetTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).SetTitle(ctx, req.(*SetTerminalTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_UpdateAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTerminalAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).UpdateAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalService_UpdateAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).UpdateAnnotations(ctx, req.(*UpdateTerminalAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerminalService_ServiceDesc is the grpc.ServiceDesc for TerminalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerminalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.TerminalService",
	HandlerType: (*TerminalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _TerminalService_Open_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _TerminalService_Shutdown_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TerminalService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TerminalService_List_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _TerminalService_Write_Handler,
		},
		{
			MethodName: "SetSize",
			Handler:    _TerminalService_SetSize_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _TerminalService_SetTitle_Handler,
		},
		{
			MethodName: "UpdateAnnotations",
			Handler:    _TerminalService_UpdateAnnotations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _TerminalService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "terminal.proto",
}
